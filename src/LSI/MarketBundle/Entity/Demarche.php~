<?php

namespace LSI\MarketBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\UploadedFile;


/**
 * Demarche
 *
 * @ORM\Table(name="demarche")
 * @ORM\Entity(repositoryClass="LSI\MarketBundle\Repository\DemarcheRepository")
 */
class Demarche
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="url", type="string", length=255)
     */
    private $url;


    /**
 * @var string
 *
 * @ORM\Column(name="alt", type="string", length=255)
 */
    private $alt;

    /**
     * @ORM\OneToOne(targetEntity="LSI\MarketBundle\Entity\Mairie", cascade={"persist"})
     * @ORM\JoinColumn(nullable=true)
     */
    protected $mairie;

    /**
     * @var UploadedFile
     */
    protected $docbien;

    /**
     * @var UploadedFile
     */
    protected $docbudget;

    /**
     * @var UploadedFile
     */
    protected $docdecision;

    /**
     * @var UploadedFile
     */
    protected $docdecisionbudget;

    /**
     * @var UploadedFile
     */
    protected $conditionlocation;

    /**
     * @var UploadedFile
     */
    protected $contratassurance;

    /**
     * @ORM\Column(name="etat", type="string", length=2)
     */
    protected $demarcheEtat = "KO";


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }



    /**
     * Set url
     *
     * @param string $url
     *
     * @return Demarche
     */
    public function setUrl($url)
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Get url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set alt
     *
     * @param string $alt
     *
     * @return Demarche
     */
    public function setAlt($alt)
    {
        $this->alt = $alt;

        return $this;
    }

    /**
     * Get alt
     *
     * @return string
     */
    public function getAlt()
    {
        return $this->alt;
    }

    /**
     * Set demarcheEtat
     *
     * @param string $demarcheEtat
     *
     * @return Demarche
     */
    public function setDemarcheEtat($demarcheEtat)
    {
        $this->demarcheEtat = $demarcheEtat;

        return $this;
    }

    /**
     * Get demarcheEtat
     *
     * @return string
     */
    public function getDemarcheEtat()
    {
        return $this->demarcheEtat;
    }

    /**
     * Set mairie
     *
     * @param \LSI\MarketBundle\Entity\Mairie $mairie
     *
     * @return Demarche
     */
    public function setMairie(\LSI\MarketBundle\Entity\Mairie $mairie = null)
    {
        $this->mairie = $mairie;

        return $this;
    }

    /**
     * Get mairie
     *
     * @return \LSI\MarketBundle\Entity\Mairie
     */
    public function getMairie()
    {
        return $this->mairie;
    }

    // On ajoute cet attribut pour y stocker le nom du fichier temporairement
    private $tempFilename;

    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function preUpload()
    {
        // Si jamais il n'y a pas de fichier (champ facultatif), on ne fait rien
        if (null === $this->docbien && null === $this->docbudget && null === $this->docdecision
        && null === $this->conditionlocation && null === $this->contratassurance && null === $this->docdecisionbudget) {
            return;
        }

            // Etape 1
        // Le nom du fichier est son id, on doit juste stocker également son extension
        // Pour faire propre, on devrait renommer cet attribut en « extension », plutôt que « url »
        $this->url = $this->docbien->guessExtension();

        // Et on génère l'attribut alt de la balise <img>, à la valeur du nom du fichier sur le PC de l'internaute
        $this->alt = $this->docbien->getClientOriginalName();

        // Etape 2

        $this->url = $this->docbudget->guessExtension();
        $this->alt = $this->docbudget->getClientOriginalName();

        // Etape 3

        $this->url = $this->docdecision->guessExtension();
        $this->alt = $this->docdecision->getClientOriginalName();

        // Etape 4

        $this->url = $this->conditionlocation->guessExtension();
        $this->alt = $this->conditionlocation->getClientOriginalName();

        // Etape 5

        $this->url = $this->contratassurance->guessExtension();
        $this->alt = $this->contratassurance->getClientOriginalName();

        // Etape 6

        $this->url = $this->docdecisionbudget->guessExtension();
        $this->alt = $this->docdecisionbudget->getClientOriginalName();
    }

    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function upload()
    {
        // Si jamais il n'y a pas de fichier (champ facultatif), on ne fait rien
        /*if (null === $this->docbien && null === $this->docbudget && null === $this->docdecision
            && null === $this->conditionlocation && null === $this->contratassurance && null === $this->docdecisionbudget) {
            return;
        }*/

        if(null === $this->docbien){
            return ;
        }elseif(null === $this->docbudget){
            return ;
        }elseif (null === $this->docdecision){
            return ;
        }elseif (null === $this->conditionlocation){
            return ;
        }elseif (null === $this->contratassurance){
            return ;
        }elseif (null === $this->docdecisionbudget){
            return ;
        }

        // Si on avait un ancien fichier (attribut tempFilename non null), on le supprime
        if (null !== $this->tempFilename) {
            $oldFile = $this->getUploadRootDir().'/'.$this->id.'.'.$this->tempFilename;
            if (file_exists($oldFile)) {
                unlink($oldFile);
            }
        }

        // On déplace le fichier envoyé dans le répertoire de notre choix
        $this->docbien->move(
            $this->getUploadRootDir(), // Le répertoire de destination
            $this->id.'.'.$this->url   // Le nom du fichier à créer, ici « id.extension »
        );

        $this->docbudget->move(
            $this->getUploadRootDir(), // Le répertoire de destination
            $this->id.'.'.$this->url   // Le nom du fichier à créer, ici « id.extension »
        );

        $this->docdecision->move(
            $this->getUploadRootDir(), // Le répertoire de destination
            $this->id.'.'.$this->url   // Le nom du fichier à créer, ici « id.extension »
        );

        $this->conditionlocation->move(
            $this->getUploadRootDir(), // Le répertoire de destination
            $this->id.'.'.$this->url   // Le nom du fichier à créer, ici « id.extension »
        );

        $this->contratassurance->move(
            $this->getUploadRootDir(), // Le répertoire de destination
            $this->id.'.'.$this->url   // Le nom du fichier à créer, ici « id.extension »
        );

        $this->docdecisionbudget->move(
            $this->getUploadRootDir(), // Le répertoire de destination
            $this->id.'.'.$this->url   // Le nom du fichier à créer, ici « id.extension »
        );
    }

    /**
     * @ORM\PreRemove()
     */
    public function preRemoveUpload()
    {
        // On sauvegarde temporairement le nom du fichier, car il dépend de l'id
        $this->tempFilename = $this->getUploadRootDir().'/'.$this->id.'.'.$this->url;
    }

    /**
     * @ORM\PostRemove()
     */
    public function removeUpload()
    {
        // En PostRemove, on n'a pas accès à l'id, on utilise notre nom sauvegardé
        if (file_exists($this->tempFilename)) {
            // On supprime le fichier
            unlink($this->tempFilename);
        }
    }

    public function getUploadDir()
    {
        // On retourne le chemin relatif vers l'image pour un navigateur (relatif au répertoire /web donc)
        return 'uploads/annonce/documents';
    }

    protected function getUploadRootDir()
    {
        // On retourne le chemin relatif vers l'image pour notre code PHP
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }

    public function getWebPath()
    {
        return $this->getUploadDir().'/'.$this->getId().'.'.$this->getUrl();
    }

    // Methode getters et setters etape 1

    /**
     * @return UploadedFile
     */
    public function getDocbien()
    {
        return $this->docbien;
    }

    /**
     * @param UploadedFile $docbien
     */
    // On modifie le setter de File, pour prendre en compte l'upload d'un fichier lorsqu'il en existe déjà un autre
    public function setDocbien(UploadedFile $docbien)
    {
        $this->docbien = $docbien;

        // On vérifie si on avait déjà un fichier pour cette entité
        if (null !== $this->url) {
            // On sauvegarde l'extension du fichier pour le supprimer plus tard
            $this->tempFilename = $this->url;

            // On réinitialise les valeurs des attributs url et alt
            $this->url = null;
            $this->alt = null;
        }
    }

    // Methode getters et setters pour etape 2


    /**
     * @return UploadedFile
     */
    public function getDocbudget()
    {
        return $this->docbudget;
    }

    /**
     * @param UploadedFile $docbudget
     */
    // On modifie le setter de File, pour prendre en compte l'upload d'un fichier lorsqu'il en existe déjà un autre
    public function setDocbudget(UploadedFile $docbudget)
    {
        $this->docbudget = $docbudget;

        // On vérifie si on avait déjà un fichier pour cette entité
        if (null !== $this->url) {
            // On sauvegarde l'extension du fichier pour le supprimer plus tard
            $this->tempFilename = $this->url;

            // On réinitialise les valeurs des attributs url et alt
            $this->url = null;
            $this->alt = null;
        }
    }

    // Methode getters et setters etape 3


    /**
     * @return UploadedFile
     */
    public function getDocdecision()
    {
        return $this->docdecision;
    }

    /**
     * @param UploadedFile $docdecision
     */
    // On modifie le setter de File, pour prendre en compte l'upload d'un fichier lorsqu'il en existe déjà un autre
    public function setDocdecision(UploadedFile $docdecision)
    {
        $this->docdecision = $docdecision;

        // On vérifie si on avait déjà un fichier pour cette entité
        if (null !== $this->url) {
            // On sauvegarde l'extension du fichier pour le supprimer plus tard
            $this->tempFilename = $this->url;

            // On réinitialise les valeurs des attributs url et alt
            $this->url = null;
            $this->alt = null;
        }
    }

    // Methode getters et settes pour etape 4

    /**
     * @return UploadedFile
     */
    public function getDocdecisionbudget()
    {
        return $this->docdecisionbudget;
    }

    /**
     * @param UploadedFile $docdecisionbudget
     */
    // On modifie le setter de File, pour prendre en compte l'upload d'un fichier lorsqu'il en existe déjà un autre
    public function setDocdecisionbudget(UploadedFile $docdecisionbudget)
    {
        $this->docdecisionbudget = $docdecisionbudget;

        // On vérifie si on avait déjà un fichier pour cette entité
        if (null !== $this->url) {
            // On sauvegarde l'extension du fichier pour le supprimer plus tard
            $this->tempFilename = $this->url;

            // On réinitialise les valeurs des attributs url et alt
            $this->url = null;
            $this->alt = null;
        }
    }

    // Methode getters et setters pour etape 5

    /**
     * @return UploadedFile
     */
    public function getConditionlocation()
    {
        return $this->conditionlocation;
    }

    /**
     * @param UploadedFile $conditionlocation
     */
    // On modifie le setter de File, pour prendre en compte l'upload d'un fichier lorsqu'il en existe déjà un autre
    public function setConditionlocation(UploadedFile $conditionlocation)
    {
        $this->conditionlocation = $conditionlocation;

        // On vérifie si on avait déjà un fichier pour cette entité
        if (null !== $this->url) {
            // On sauvegarde l'extension du fichier pour le supprimer plus tard
            $this->tempFilename = $this->url;

            // On réinitialise les valeurs des attributs url et alt
            $this->url = null;
            $this->alt = null;
        }
    }

    // Methode setters et getters pour etape 6

    /**
     * @return UploadedFile
     */
    public function getContratassurance()
    {
        return $this->contratassurance;
    }

    /**
     * @param UploadedFile $contratassurance
     */
    // On modifie le setter de File, pour prendre en compte l'upload d'un fichier lorsqu'il en existe déjà un autre
    public function setContratassurance(UploadedFile $contratassurance)
    {
        $this->contratassurance = $contratassurance;

        // On vérifie si on avait déjà un fichier pour cette entité
        if (null !== $this->url) {
            // On sauvegarde l'extension du fichier pour le supprimer plus tard
            $this->tempFilename = $this->url;

            // On réinitialise les valeurs des attributs url et alt
            $this->url = null;
            $this->alt = null;
        }
    }
}
